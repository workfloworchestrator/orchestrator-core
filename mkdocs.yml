site_name: Workflow Orchestrator
site_description: An extensible workflow engine to manage customer facing resources and resource facing resources.
site_url: https://workfloworchestrator.org/orchestrator-core
theme:
  name: material
  icon:
    repo: fontawesome/brands/github-alt
  favicon: img/favicon.ico
  logo: img/WFO-Emblem-White.png
  palette:
  - scheme: default
    primary: teal
    accent: amber
    toggle:
      icon: material/lightbulb-outline
      name: Switch to light mode
  - scheme: slate
    primary: teal
    accent: amber
    toggle:
      icon: material/lightbulb
      name: Switch to dark mode
  features:
  - search.suggest
  - search.highlight
  - navigation.tabs
  - navigation.tabs.sticky
  - navigation.tracking
  - navigation.instant
  - navigation.indexes
  - content.code.copy
  - content.code.annotate
  - content.tooltips
plugins:
  - external-markdown
  - search
  - open-in-new-tab
  - render_swagger
  - macros
  - include-markdown
  - privacy
  - social
  - mkdocstrings:
      default_handler: python
      enable_inventory: true
      handlers:
        python:
          options:
            show_source: true
            show_root_heading: true
            show_root_toc_entry: true
            show_symbol_type_heading: true
            show_symbol_type_toc: true
            docstring_style: null
            docstring_section_style: list
            annotations_path: full
            separate_signature: true
            line_length: 80
            show_signature_annotations: true
            unwrap_annotated: true
            docstring_options:
              trim_doctest_flags: true
copyright: Copyright &copy; 2018 - 2024 Workflow Orchestrator Programme
extra:
  generator: false
repo_name: workfloworchestrator/orchestrator-core
repo_url: https://github.com/workfloworchestrator/orchestrator-core
edit_uri: edit/main/docs/
markdown_extensions:
  - pymdownx.emoji:
      emoji_index: !!python/name:material.extensions.emoji.twemoji
      emoji_generator: !!python/name:material.extensions.emoji.to_svg
  - pymdownx.highlight
  - pymdownx.superfences
  - admonition
  - pymdownx.details
  - pymdownx.superfences
  - pymdownx.snippets:
      auto_append:
        - includes/abbreviations.md
  - pymdownx.keys
  - pymdownx.inlinehilite
  - pymdownx.tabbed:
      alternate_style: true
  - attr_list
  - codehilite
  - pymdownx.superfences:
      custom_fences:
        - name: mermaid
          class: mermaid
          format: !!python/name:pymdownx.superfences.fence_code_format
  - abbr

extra_css:
  - 'css/termynal.css'
  - 'css/custom.css'
  - 'css/style.css'
extra_javascript:
  - 'js/termynal.js'
  - 'js/custom.js'

nav:
  - Workflow Orchestrator:
    - Workflow Orchestrator: index.md
    - Orchestrator Framework: architecture/framework.md
    - Orchestrator UI:
      - Orchestrator UI: architecture/orchestration/orchestrator-ui.md
        # - Env variables:
          # - Dark Theme adjustment / dark theme env setting
          # - Your own company logo
        # - Component-lib
        # - RBAC
          # - Isallowed wrapper
          # - OIDC
          # - Code flow with PKCE
      - User input forms:
        - Generic solution: architecture/application/forms-frontend.md
          # - Form page with all form field:
        # - Extensibility:
          # - Extra menu item
          # - Add a new summary card
    - Architecture:
      - Architecture; TL;DR: architecture/tldr.md
      - Orchestration Philosophy: architecture/orchestration/philosophy.md
      - Domain Models: architecture/application/domainmodels.md
      - Internals:
        - How do Workflows work?: architecture/application/workflow.md
        - What are tasks?: architecture/application/tasks.md
      - Advanced - Product modelling:
        - Introduction: architecture/product_modelling/introduction.md
        - Standards: architecture/product_modelling/standards.md
        - Modelling: architecture/product_modelling/modelling.md
        - Context: architecture/product_modelling/context.md
        - Terminology: architecture/product_modelling/terminology.md
        - Example Product Models:
          - Node: architecture/product_modelling/node.md
          - Port: architecture/product_modelling/port.md
          - L2 Point-to-Point: architecture/product_modelling/l2_point_to_point.md
          - L2 VPN: architecture/product_modelling/l2_vpn.md
          - IP Static: architecture/product_modelling/ip_static.md
        - Product Block Graph: architecture/product_modelling/product_block_graph.md
        - Importing Existing Products: architecture/product_modelling/imports.md
  - Getting Started:
    - Prerequisites: getting-started/versions.md
    - Base Application:
      - Preparing source folder: getting-started/prepare-source-folder.md
      - Python Virtualenv: getting-started/base.md
    - Docker: getting-started/docker.md
    - Orchestrator UI: getting-started/orchestration-ui.md
  - Reference Documentation:
    - TL;DR: reference-docs/tldr.md
    - API docs:
      - Rest API: reference-docs/api.md
      - GraphQL: reference-docs/graphql.md
    - Auth(n|z): reference-docs/auth.md
    - CLI Tools: reference-docs/cli.md
    - Database: reference-docs/database.md
    # - Serialization: reference-docs/serialization.md
    - Domain Models:
      - Overview: reference-docs/domain_models/overview.md
      - Domain Model Types:
        - Product Types: reference-docs/domain_models/product_types.md
        - Product Blocks: reference-docs/domain_models/product_blocks.md
        - Model Attributes: reference-docs/domain_models/model_attributes.md
      - Helpers:
        - Generator: reference-docs/domain_models/generator.md
#      - Advanced Features:
#        - Properties: reference-docs/domain_models/properties.md
#        - Union Types: reference-docs/domain_models/union_types.md
#        - Pydantic hooks: reference-docs/domain_models/pydantic_hooks.md
#      - Instantiating Domain Models: reference-docs/domain_models/instantiating.md
#      - Validation: reference-docs/domain_models/validation.md
#      - Type Casting and Serialisation: reference-docs/domain_models/type_casting.md
    - Forms: reference-docs/forms.md
    - Running the App:
      - App.py : reference-docs/app/app.md
      - Python Version: reference-docs/python.md
      - Scaling: reference-docs/app/scaling.md
    # - Tasks:  reference-docs/tasks.md
    # - Tests: reference-docs/tests.md
    - Workflows:
      - Workflow Steps:  reference-docs/workflows/workflow-steps.md
      # - Workflow Lifecycles: reference-docs/workflows/workflow-lifecycles.md
      - Callbacks: reference-docs/workflows/callbacks.md
    - Websockets: reference-docs/websockets.md
    - Migration guide: migration-guide/2.0.md

  - Workshops:
#    - Beginner:
#      - Overview: workshops/beginner/overview.md
#      - Installation:
#        - Manual:
#          - Debian: workshops/beginner/debian.md
#          - MacOS: workshops/beginner/macos.md
#        - Docker compose: workshops/beginner/docker.md
#      - Start applications: workshops/beginner/start-applications.md
#      - Products:
#        - Scenario: workshops/beginner/scenario.md
#        - Domain models: workshops/beginner/domain-models.md
#        - Database migration: workshops/beginner/database-migration.md
#      - Workflows:
#        - Introduction: workshops/beginner/workflow-introduction.md
#        - Register workflows: workshops/beginner/register-workflows.md
#        - Input forms: workshops/beginner/input-forms.md
#        - Create UserGroup: workshops/beginner/create-user-group.md
#        - Modify UserGroup: workshops/beginner/modify-user-group.md
#        - Terminate UserGroup: workshops/beginner/terminate-user-group.md
#        - Create User: workshops/beginner/create-user.md
#        - Modify User: workshops/beginner/modify-user.md
#        - Terminate User: workshops/beginner/terminate-user.md
#      - Explore: workshops/beginner/explore.md
    - Example Orchestrator Workshop:
      - Overview: workshops/advanced/overview.md
#      - Installation: workshops/advanced/docker-installation.md
      - Bootstrapping:
        - Getting started: workshops/advanced/bootstrap.md
        - Seeding data: workshops/advanced/execute-workflows.md
      - Products:
        - Scenario: workshops/advanced/scenario.md
        - Domain models: workshops/advanced/domain-models.md
      - Workflows:
        - Introduction: workshops/advanced/workflow-introduction.md
        - Workflow Basics: workshops/advanced/workflow-basics.md
        - Workflow Examples:
          - Create Workflow: workshops/advanced/node-create.md
          - Modify Workflow: workshops/advanced/node-modify.md
          - Terminate Workflow: workshops/advanced/node-terminate.md
          - Validate Workflow: workshops/advanced/node-validate.md
      - Create your own product and workflows:
        - L2 Point-to-Point: workshops/advanced/create-your-own.md
        - Product and Workflow Generator: workshops/advanced/generator.md
  - Contributing:
    - Guidelines: contributing/guidelines.md
    - Testing: contributing/testing.md
    - Development setup: contributing/development.md
watch:
  - includes
  - orchestrator
