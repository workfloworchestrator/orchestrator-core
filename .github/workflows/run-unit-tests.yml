name: Unit tests
on:
  push:
    branches: [ main ]
  workflow_call:
  pull_request:

env:
  UV_LOCKED: true  # Assert that the `uv.lock` will remain unchanged

jobs:
  container_job:
    name: Unit tests Python (${{ matrix.python-version }}) Postgres (${{ matrix.postgres-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
        postgres-version: ['15', '16', '17']
      fail-fast: false
    container: ubuntu:latest
    services:
      postgres:
        image: postgres:${{ matrix.postgres-version }}-alpine
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: nwa
          POSTGRES_USER: nwa
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          # It is considered best practice to pin to a specific uv version.
          version: "0.7.13"
          python-version: ${{ matrix.python-version }}

      - name: Install the project
        # --all-extras: [project.optional-dependencies]
        # --dev: group 'dev' from [dependency-groups]
        run: uv sync --all-extras --dev

      - name: Run tests
        run: CACHE_URI=redis://redis DATABASE_URI=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DB uv run pytest --cov-branch --cov=orchestrator --cov-report=xml --ignore=test --ignore=orchestrator/devtools --ignore=examples --ignore=docs
        env:
          POSTGRES_DB: orchestrator-core-test
          POSTGRES_USER: nwa
          POSTGRES_PASSWORD: nwa
          POSTGRES_HOST: postgres
          ENVIRONMENT: TESTING

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}  # gives error 'Could not find a repository associated with upload token'
          fail_ci_if_error: false
          files: ./coverage.xml
