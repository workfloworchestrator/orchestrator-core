name: Unit tests
on:
  push:
  workflow_call:

jobs:
  container_job:
    name: Unit tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
      fail-fast: false
    container: python:${{ matrix.python-version }}-slim
    services:
      postgres:
        image: postgres:12-alpine
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: nwa
          POSTGRES_USER: nwa
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          apt update
          apt install curl git build-essential libpq-dev libffi-dev -y
          python -m pip install --upgrade pip
          pip install flit
          flit install --deps develop --symlink
          echo "GIT_COMMIT_HASH=\"test\"" > orchestrator/version.py
        env:
          FLIT_ROOT_INSTALL: 1
      - name: Run Unit tests
        run: CACHE_URI=redis://redis DATABASE_URI=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DB  pytest --cov-branch --cov=orchestrator --cov-report=xml --ignore=test --ignore=orchestrator/devtools --ignore=examples --ignore=docs --ignore=test/unit_tests/graphql
        env:
          POSTGRES_DB: orchestrator-core-test
          POSTGRES_USER: nwa
          POSTGRES_PASSWORD: nwa
          POSTGRES_HOST: postgres
          ENVIRONMENT: TESTING
      - name: Run Graphql Unit tests
        run: AIOCACHE_DISABLE=1 CACHE_URI=redis://redis DATABASE_URI=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DB  pytest ./test/unit_tests/graphql
        env:
          POSTGRES_DB: orchestrator-core-test
          POSTGRES_USER: nwa
          POSTGRES_PASSWORD: nwa
          POSTGRES_HOST: postgres
          ENVIRONMENT: TESTING
      - name: Run test_subscriptions_product_generic_one Unit test
        run: CACHE_URI=redis://redis DATABASE_URI=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DB  pytest ./test/unit_tests/ -k test_subscriptions_product_generic_one
        env:
          POSTGRES_DB: orchestrator-core-test
          POSTGRES_USER: nwa
          POSTGRES_PASSWORD: nwa
          POSTGRES_HOST: postgres
          ENVIRONMENT: TESTING
      - name: Run test_single_subscription_product_list_union_type_provisioning_subscription Unit test
        run: CACHE_URI=redis://redis DATABASE_URI=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DB  pytest ./test/unit_tests/ -k test_single_subscription_product_list_union_type_provisioning_subscription
        env:
          POSTGRES_DB: orchestrator-core-test
          POSTGRES_USER: nwa
          POSTGRES_PASSWORD: nwa
          POSTGRES_HOST: postgres
          ENVIRONMENT: TESTING
      - name: Run test_single_subscription_product_list_union_type_terminated_subscription Unit test
        run: CACHE_URI=redis://redis DATABASE_URI=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DB  pytest ./test/unit_tests/ -k test_single_subscription_product_list_union_type_terminated_subscription
        env:
          POSTGRES_DB: orchestrator-core-test
          POSTGRES_USER: nwa
          POSTGRES_PASSWORD: nwa
          POSTGRES_HOST: postgres
          ENVIRONMENT: TESTING
      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          files: ./coverage.xml
