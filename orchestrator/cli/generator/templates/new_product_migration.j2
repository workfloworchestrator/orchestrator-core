"""Add {{ product.variable }} product.

Revision ID: {{ revision }}
Revises: {{ down_revision }}
Create Date: {{ create_date}}

"""
from uuid import uuid4

from alembic import op

from orchestrator.migrations.helpers import create, create_workflow, delete, delete_workflow, ensure_default_workflows
from orchestrator.targets import Target

from surf.products.product_types.fixed_input_types import Domain

# revision identifiers, used by Alembic.
revision = "{{ revision }}"
down_revision = "{{ down_revision }}"
branch_labels = None
depends_on = None

new_products = {
    "products": {
        "{{ product.name }}": {
            "product_id": uuid4(),
            "product_type": "{{ product.product_type }}",
            "description": "{{ product.description }}",
            "tag": "{{ product.tag }}",
            "status": "active",
            "product_blocks": ["SN8 Light Path Virtual Circuit"],
            "fixed_inputs": {
                "domain": Domain.NETHERLIGHT8,
            },
        },
    },
}

new_workflows = [
    {
        "name": "create_{{ product.variable }}",
        "target": Target.CREATE,
        "description": "Create {{ product.name }}",
        "product_type": "{{ product.product_type }}",
    },
    {
        "name": "modify_{{ product.variable }}",
        "target": Target.MODIFY,
        "description": "Modify {{ product.name }}",
        "product_type": "{{ product.product_type }}",
    },
    {
        "name": "terminate_{{ product.variable }}",
        "target": Target.TERMINATE,
        "description": "Terminate {{ product.name }}",
        "product_type": "{{ product.product_type }}",
    },
    {
        "name": "validate_{{ product.variable }}",
        "target": Target.SYSTEM,
        "description": "Validate {{ product.name }}",
        "product_type": "{{ product.product_type }}",
    },
]


def upgrade() -> None:
    conn = op.get_bind()
    create(conn, new_products)
    for workflow in new_workflows:
        create_workflow(conn, workflow)
    ensure_default_workflows(conn)


def downgrade() -> None:
    conn = op.get_bind()
    for workflow in new_workflows:
        delete_workflow(conn, workflow["name"])

    delete(conn, new_products)
