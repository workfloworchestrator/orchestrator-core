{
  "FuzzyRetriever.test_basic_query_structure": "SELECT ranked_fuzzy.entity_id, ranked_fuzzy.entity_title, ranked_fuzzy.score, ranked_fuzzy.highlight_text, ranked_fuzzy.highlight_path \nFROM (SELECT DISTINCT ON (ai_search_index.entity_id, ai_search_index.entity_title) ai_search_index.entity_id AS entity_id, ai_search_index.entity_title AS entity_title, CAST(round(CAST(max(word_similarity(%(word_similarity_1)s, ai_search_index.value)) OVER (PARTITION BY ai_search_index.entity_id) AS NUMERIC(38, 12)), %(round_1)s) AS NUMERIC(38, 12)) AS score, first_value(ai_search_index.value) OVER (PARTITION BY ai_search_index.entity_id ORDER BY word_similarity(%(word_similarity_1)s, ai_search_index.value) DESC, ai_search_index.path ASC) AS highlight_text, first_value(ai_search_index.path) OVER (PARTITION BY ai_search_index.entity_id ORDER BY word_similarity(%(word_similarity_1)s, ai_search_index.value) DESC, ai_search_index.path ASC) AS highlight_path \nFROM ai_search_index JOIN (SELECT DISTINCT ai_search_index.entity_id AS entity_id, ai_search_index.entity_title AS entity_title \nFROM ai_search_index) AS anon_1 ON anon_1.entity_id = ai_search_index.entity_id \nWHERE ai_search_index.value_type IN (__[POSTCOMPILE_value_type_1]) AND (%(param_1)s <%% ai_search_index.value)) AS ranked_fuzzy ORDER BY ranked_fuzzy.score DESC NULLS LAST, ranked_fuzzy.entity_id ASC",
  "FuzzyRetriever.test_pagination_structure": "SELECT ranked_fuzzy.entity_id, ranked_fuzzy.entity_title, ranked_fuzzy.score, ranked_fuzzy.highlight_text, ranked_fuzzy.highlight_path \nFROM (SELECT DISTINCT ON (ai_search_index.entity_id, ai_search_index.entity_title) ai_search_index.entity_id AS entity_id, ai_search_index.entity_title AS entity_title, CAST(round(CAST(max(word_similarity(%(word_similarity_1)s, ai_search_index.value)) OVER (PARTITION BY ai_search_index.entity_id) AS NUMERIC(38, 12)), %(round_1)s) AS NUMERIC(38, 12)) AS score, first_value(ai_search_index.value) OVER (PARTITION BY ai_search_index.entity_id ORDER BY word_similarity(%(word_similarity_1)s, ai_search_index.value) DESC, ai_search_index.path ASC) AS highlight_text, first_value(ai_search_index.path) OVER (PARTITION BY ai_search_index.entity_id ORDER BY word_similarity(%(word_similarity_1)s, ai_search_index.value) DESC, ai_search_index.path ASC) AS highlight_path \nFROM ai_search_index JOIN (SELECT DISTINCT ai_search_index.entity_id AS entity_id, ai_search_index.entity_title AS entity_title \nFROM ai_search_index) AS anon_1 ON anon_1.entity_id = ai_search_index.entity_id \nWHERE ai_search_index.value_type IN (__[POSTCOMPILE_value_type_1]) AND (%(param_1)s <%% ai_search_index.value)) AS ranked_fuzzy \nWHERE ranked_fuzzy.score < %(score_1)s OR ranked_fuzzy.score = %(score_2)s AND ranked_fuzzy.entity_id > %(entity_id_1)s::UUID ORDER BY ranked_fuzzy.score DESC NULLS LAST, ranked_fuzzy.entity_id ASC",
  "RrfHybridRetriever.test_basic_query_structure": "WITH field_candidates AS \n(SELECT ai_search_index.entity_id AS entity_id, ai_search_index.entity_title AS entity_title, ai_search_index.path AS path, ai_search_index.value AS value, coalesce(CASE WHEN (ai_search_index.embedding IS NULL) THEN NULL ELSE ai_search_index.embedding <-> %(q_vec)s END, %(param_9)s) AS semantic_distance, word_similarity(%(word_similarity_1)s, ai_search_index.value) AS fuzzy_score \nFROM ai_search_index JOIN (SELECT DISTINCT ai_search_index.entity_id AS entity_id, ai_search_index.entity_title AS entity_title \nFROM ai_search_index) AS anon_1 ON anon_1.entity_id = ai_search_index.entity_id \nWHERE ai_search_index.value_type IN (__[POSTCOMPILE_value_type_1]) AND (%(param_10)s <%% ai_search_index.value) ORDER BY word_similarity(%(word_similarity_1)s, ai_search_index.value) DESC NULLS LAST, CASE WHEN (ai_search_index.embedding IS NULL) THEN NULL ELSE ai_search_index.embedding <-> %(q_vec)s END ASC NULLS LAST, ai_search_index.entity_id ASC \n LIMIT %(param_11)s), \nentity_scores AS \n(SELECT field_candidates.entity_id AS entity_id, field_candidates.entity_title AS entity_title, avg(field_candidates.semantic_distance) AS avg_semantic_distance, avg(field_candidates.fuzzy_score) AS avg_fuzzy_score \nFROM field_candidates GROUP BY field_candidates.entity_id, field_candidates.entity_title), \nentity_highlights AS \n(SELECT DISTINCT ON (field_candidates.entity_id) field_candidates.entity_id AS entity_id, first_value(field_candidates.value) OVER (PARTITION BY field_candidates.entity_id ORDER BY field_candidates.fuzzy_score DESC, field_candidates.path ASC) AS highlight_text, first_value(field_candidates.path) OVER (PARTITION BY field_candidates.entity_id ORDER BY field_candidates.fuzzy_score DESC, field_candidates.path ASC) AS highlight_path \nFROM field_candidates), \nranked_results AS \n(SELECT entity_scores.entity_id AS entity_id, entity_scores.entity_title AS entity_title, entity_scores.avg_semantic_distance AS avg_semantic_distance, entity_scores.avg_fuzzy_score AS avg_fuzzy_score, entity_highlights.highlight_text AS highlight_text, entity_highlights.highlight_path AS highlight_path, dense_rank() OVER (ORDER BY entity_scores.avg_semantic_distance ASC NULLS LAST, entity_scores.entity_id ASC) AS sem_rank, dense_rank() OVER (ORDER BY entity_scores.avg_fuzzy_score DESC NULLS LAST, entity_scores.entity_id ASC) AS fuzzy_rank \nFROM entity_scores JOIN entity_highlights ON entity_scores.entity_id = entity_highlights.entity_id)\n SELECT ranked_results.entity_id, ranked_results.entity_title, CAST(round(CAST((CAST(%(param_1)s / CAST((%(sem_rank_1)s + ranked_results.sem_rank) AS NUMERIC) + %(param_2)s / CAST((%(fuzzy_rank_1)s + ranked_results.fuzzy_rank) AS NUMERIC) AS NUMERIC(38, 12)) + (%(param_3)s / CAST((%(param_4)s + %(param_5)s) AS NUMERIC(38, 12)) + (%(param_3)s / CAST((%(param_4)s + %(param_5)s) AS NUMERIC(38, 12))) * %(param_6)s) * CAST(CASE WHEN (ranked_results.avg_fuzzy_score >= %(avg_fuzzy_score_1)s) THEN %(param_7)s ELSE %(param_8)s END AS NUMERIC(38, 12))) / CAST((%(param_3)s / CAST((%(param_4)s + %(param_5)s) AS NUMERIC(38, 12)) + (%(param_3)s / CAST((%(param_4)s + %(param_5)s) AS NUMERIC(38, 12))) * %(param_6)s + %(param_3)s / CAST((%(param_4)s + %(param_5)s) AS NUMERIC(38, 12))) AS NUMERIC(38, 12)) AS NUMERIC(38, 12)), %(round_1)s) AS NUMERIC(38, 12)) AS score, ranked_results.highlight_text, ranked_results.highlight_path, CASE WHEN (ranked_results.avg_fuzzy_score >= %(avg_fuzzy_score_1)s) THEN %(param_7)s ELSE %(param_8)s END AS perfect_match \nFROM ranked_results ORDER BY score DESC NULLS LAST, ranked_results.entity_id ASC",
  "RrfHybridRetriever.test_pagination_structure": "WITH field_candidates AS \n(SELECT ai_search_index.entity_id AS entity_id, ai_search_index.entity_title AS entity_title, ai_search_index.path AS path, ai_search_index.value AS value, coalesce(CASE WHEN (ai_search_index.embedding IS NULL) THEN NULL ELSE ai_search_index.embedding <-> %(q_vec)s END, %(param_9)s) AS semantic_distance, word_similarity(%(word_similarity_1)s, ai_search_index.value) AS fuzzy_score \nFROM ai_search_index JOIN (SELECT DISTINCT ai_search_index.entity_id AS entity_id, ai_search_index.entity_title AS entity_title \nFROM ai_search_index) AS anon_1 ON anon_1.entity_id = ai_search_index.entity_id \nWHERE ai_search_index.value_type IN (__[POSTCOMPILE_value_type_1]) AND (%(param_10)s <%% ai_search_index.value) ORDER BY word_similarity(%(word_similarity_1)s, ai_search_index.value) DESC NULLS LAST, CASE WHEN (ai_search_index.embedding IS NULL) THEN NULL ELSE ai_search_index.embedding <-> %(q_vec)s END ASC NULLS LAST, ai_search_index.entity_id ASC \n LIMIT %(param_11)s), \nentity_scores AS \n(SELECT field_candidates.entity_id AS entity_id, field_candidates.entity_title AS entity_title, avg(field_candidates.semantic_distance) AS avg_semantic_distance, avg(field_candidates.fuzzy_score) AS avg_fuzzy_score \nFROM field_candidates GROUP BY field_candidates.entity_id, field_candidates.entity_title), \nentity_highlights AS \n(SELECT DISTINCT ON (field_candidates.entity_id) field_candidates.entity_id AS entity_id, first_value(field_candidates.value) OVER (PARTITION BY field_candidates.entity_id ORDER BY field_candidates.fuzzy_score DESC, field_candidates.path ASC) AS highlight_text, first_value(field_candidates.path) OVER (PARTITION BY field_candidates.entity_id ORDER BY field_candidates.fuzzy_score DESC, field_candidates.path ASC) AS highlight_path \nFROM field_candidates), \nranked_results AS \n(SELECT entity_scores.entity_id AS entity_id, entity_scores.entity_title AS entity_title, entity_scores.avg_semantic_distance AS avg_semantic_distance, entity_scores.avg_fuzzy_score AS avg_fuzzy_score, entity_highlights.highlight_text AS highlight_text, entity_highlights.highlight_path AS highlight_path, dense_rank() OVER (ORDER BY entity_scores.avg_semantic_distance ASC NULLS LAST, entity_scores.entity_id ASC) AS sem_rank, dense_rank() OVER (ORDER BY entity_scores.avg_fuzzy_score DESC NULLS LAST, entity_scores.entity_id ASC) AS fuzzy_rank \nFROM entity_scores JOIN entity_highlights ON entity_scores.entity_id = entity_highlights.entity_id)\n SELECT ranked_results.entity_id, ranked_results.entity_title, CAST(round(CAST((CAST(%(param_1)s / CAST((%(sem_rank_1)s + ranked_results.sem_rank) AS NUMERIC) + %(param_2)s / CAST((%(fuzzy_rank_1)s + ranked_results.fuzzy_rank) AS NUMERIC) AS NUMERIC(38, 12)) + (%(param_3)s / CAST((%(param_4)s + %(param_5)s) AS NUMERIC(38, 12)) + (%(param_3)s / CAST((%(param_4)s + %(param_5)s) AS NUMERIC(38, 12))) * %(param_6)s) * CAST(CASE WHEN (ranked_results.avg_fuzzy_score >= %(avg_fuzzy_score_1)s) THEN %(param_7)s ELSE %(param_8)s END AS NUMERIC(38, 12))) / CAST((%(param_3)s / CAST((%(param_4)s + %(param_5)s) AS NUMERIC(38, 12)) + (%(param_3)s / CAST((%(param_4)s + %(param_5)s) AS NUMERIC(38, 12))) * %(param_6)s + %(param_3)s / CAST((%(param_4)s + %(param_5)s) AS NUMERIC(38, 12))) AS NUMERIC(38, 12)) AS NUMERIC(38, 12)), %(round_1)s) AS NUMERIC(38, 12)) AS score, ranked_results.highlight_text, ranked_results.highlight_path, CASE WHEN (ranked_results.avg_fuzzy_score >= %(avg_fuzzy_score_1)s) THEN %(param_7)s ELSE %(param_8)s END AS perfect_match \nFROM ranked_results \nWHERE CAST(round(CAST((CAST(%(param_1)s / CAST((%(sem_rank_1)s + ranked_results.sem_rank) AS NUMERIC) + %(param_2)s / CAST((%(fuzzy_rank_1)s + ranked_results.fuzzy_rank) AS NUMERIC) AS NUMERIC(38, 12)) + (%(param_3)s / CAST((%(param_4)s + %(param_5)s) AS NUMERIC(38, 12)) + (%(param_3)s / CAST((%(param_4)s + %(param_5)s) AS NUMERIC(38, 12))) * %(param_6)s) * CAST(CASE WHEN (ranked_results.avg_fuzzy_score >= %(avg_fuzzy_score_1)s) THEN %(param_7)s ELSE %(param_8)s END AS NUMERIC(38, 12))) / CAST((%(param_3)s / CAST((%(param_4)s + %(param_5)s) AS NUMERIC(38, 12)) + (%(param_3)s / CAST((%(param_4)s + %(param_5)s) AS NUMERIC(38, 12))) * %(param_6)s + %(param_3)s / CAST((%(param_4)s + %(param_5)s) AS NUMERIC(38, 12))) AS NUMERIC(38, 12)) AS NUMERIC(38, 12)), %(round_1)s) AS NUMERIC(38, 12)) < %(param_12)s OR CAST(round(CAST((CAST(%(param_1)s / CAST((%(sem_rank_1)s + ranked_results.sem_rank) AS NUMERIC) + %(param_2)s / CAST((%(fuzzy_rank_1)s + ranked_results.fuzzy_rank) AS NUMERIC) AS NUMERIC(38, 12)) + (%(param_3)s / CAST((%(param_4)s + %(param_5)s) AS NUMERIC(38, 12)) + (%(param_3)s / CAST((%(param_4)s + %(param_5)s) AS NUMERIC(38, 12))) * %(param_6)s) * CAST(CASE WHEN (ranked_results.avg_fuzzy_score >= %(avg_fuzzy_score_1)s) THEN %(param_7)s ELSE %(param_8)s END AS NUMERIC(38, 12))) / CAST((%(param_3)s / CAST((%(param_4)s + %(param_5)s) AS NUMERIC(38, 12)) + (%(param_3)s / CAST((%(param_4)s + %(param_5)s) AS NUMERIC(38, 12))) * %(param_6)s + %(param_3)s / CAST((%(param_4)s + %(param_5)s) AS NUMERIC(38, 12))) AS NUMERIC(38, 12)) AS NUMERIC(38, 12)), %(round_1)s) AS NUMERIC(38, 12)) = %(param_12)s AND ranked_results.entity_id > %(entity_id_1)s::UUID ORDER BY score DESC NULLS LAST, ranked_results.entity_id ASC",
  "SemanticRetriever.test_basic_query_structure": "SELECT ranked_semantic.entity_id, ranked_semantic.entity_title, ranked_semantic.score, ranked_semantic.highlight_text, ranked_semantic.highlight_path \nFROM (SELECT DISTINCT ON (ai_search_index.entity_id, ai_search_index.entity_title) ai_search_index.entity_id AS entity_id, ai_search_index.entity_title AS entity_title, CAST(round(CAST(%(param_1)s / CAST((%(param_2)s + CAST(min(ai_search_index.embedding <-> %(embedding_1)s) OVER (PARTITION BY ai_search_index.entity_id) AS NUMERIC(38, 12))) AS NUMERIC(38, 12)) AS NUMERIC(38, 12)), %(round_1)s) AS NUMERIC(38, 12)) AS score, first_value(ai_search_index.value) OVER (PARTITION BY ai_search_index.entity_id ORDER BY (ai_search_index.embedding <-> %(embedding_1)s) ASC, ai_search_index.path ASC) AS highlight_text, first_value(ai_search_index.path) OVER (PARTITION BY ai_search_index.entity_id ORDER BY (ai_search_index.embedding <-> %(embedding_1)s) ASC, ai_search_index.path ASC) AS highlight_path \nFROM ai_search_index JOIN (SELECT DISTINCT ai_search_index.entity_id AS entity_id, ai_search_index.entity_title AS entity_title \nFROM ai_search_index) AS anon_1 ON anon_1.entity_id = ai_search_index.entity_id \nWHERE ai_search_index.embedding IS NOT NULL) AS ranked_semantic ORDER BY ranked_semantic.score DESC NULLS LAST, ranked_semantic.entity_id ASC",
  "SemanticRetriever.test_pagination_structure": "SELECT ranked_semantic.entity_id, ranked_semantic.entity_title, ranked_semantic.score, ranked_semantic.highlight_text, ranked_semantic.highlight_path \nFROM (SELECT DISTINCT ON (ai_search_index.entity_id, ai_search_index.entity_title) ai_search_index.entity_id AS entity_id, ai_search_index.entity_title AS entity_title, CAST(round(CAST(%(param_1)s / CAST((%(param_2)s + CAST(min(ai_search_index.embedding <-> %(embedding_1)s) OVER (PARTITION BY ai_search_index.entity_id) AS NUMERIC(38, 12))) AS NUMERIC(38, 12)) AS NUMERIC(38, 12)), %(round_1)s) AS NUMERIC(38, 12)) AS score, first_value(ai_search_index.value) OVER (PARTITION BY ai_search_index.entity_id ORDER BY (ai_search_index.embedding <-> %(embedding_1)s) ASC, ai_search_index.path ASC) AS highlight_text, first_value(ai_search_index.path) OVER (PARTITION BY ai_search_index.entity_id ORDER BY (ai_search_index.embedding <-> %(embedding_1)s) ASC, ai_search_index.path ASC) AS highlight_path \nFROM ai_search_index JOIN (SELECT DISTINCT ai_search_index.entity_id AS entity_id, ai_search_index.entity_title AS entity_title \nFROM ai_search_index) AS anon_1 ON anon_1.entity_id = ai_search_index.entity_id \nWHERE ai_search_index.embedding IS NOT NULL) AS ranked_semantic \nWHERE ranked_semantic.score < %(param_3)s OR ranked_semantic.score = %(param_3)s AND ranked_semantic.entity_id > %(entity_id_1)s::UUID ORDER BY ranked_semantic.score DESC NULLS LAST, ranked_semantic.entity_id ASC",
  "StructuredRetriever.test_basic_query_structure": "SELECT anon_1.entity_id, anon_1.entity_title, %(param_1)s AS score \nFROM (SELECT DISTINCT ai_search_index.entity_id AS entity_id, ai_search_index.entity_title AS entity_title \nFROM ai_search_index) AS anon_1 ORDER BY anon_1.entity_id ASC",
  "StructuredRetriever.test_pagination_structure": "SELECT anon_1.entity_id, anon_1.entity_title, %(param_1)s AS score \nFROM (SELECT DISTINCT ai_search_index.entity_id AS entity_id, ai_search_index.entity_title AS entity_title \nFROM ai_search_index) AS anon_1 \nWHERE anon_1.entity_id > %(entity_id_1)s::UUID ORDER BY anon_1.entity_id ASC"
}
